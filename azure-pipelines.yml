# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- dev

pr:
- master
- dev

variables:
- group: my-variable-group
- name: imageName
  value: '$(Build.Repository.Name):latest'

jobs:
- job: build_pr
  pool:
    vmImage: 'Ubuntu-16.04'
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
  - script: |
      git config --global user.email "$(GIT_USER_EMAIL)"
      git config --global user.name "$(GIT_USER_NAME)"
      git checkout $(System.PullRequest.SourceBranch)
      git checkout $(System.PullRequest.TargetBranch)
      git merge $(System.PullRequest.SourceBranch)
      docker build -f Dockerfile -t $(imageName) .

- job: build_branch
  pool:
    vmImage: 'Ubuntu-16.04'
  condition: eq(variables['Build.Reason'], 'IndividualCI')
  steps:
  - script: |
      docker build -f Dockerfile -t ${BUILD_REPOSITORY_NAME##*/}:${BUILD_SOURCEBRANCHNAME/\//-} .
      mkdir -p docker-cache
      docker images
      docker save -o docker-cache/built-image.tar ${BUILD_REPOSITORY_NAME##*/}:${BUILD_SOURCEBRANCHNAME/\//-}
      ls -la
    displayName: 'build_branch'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'docker-cache'
      targetPath: 'docker-cache'

- job: release_branch
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: build_branch
  condition: eq(variables['Build.Reason'], 'IndividualCI')
  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'docker-cache'
      targetPath: .
  - script: |
      ls -la
      ls -la docker-cache/
      echo $(Build.Reason)
      docker load < built-image.tar
      docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_SERVER
      if [ "${BUILD_SOURCEBRANCHNAME/\//-}" == "dev" ]; then
        docker tag ${BUILD_REPOSITORY_NAME##*/}:${BUILD_SOURCEBRANCHNAME/\//-} $DOCKER_SERVER/${BUILD_REPOSITORY_NAME##*/}:staging
        docker push $DOCKER_SERVER/${BUILD_REPOSITORY_NAME##*/}:staging
      elif [ "${BUILD_SOURCEBRANCHNAME/\//-}" == "master" ]; then
        docker tag ${BUILD_REPOSITORY_NAME##*/}:${BUILD_SOURCEBRANCHNAME/\//-} $DOCKER_SERVER/${BUILD_REPOSITORY_NAME##*/}:production
        docker push $DOCKER_SERVER/${BUILD_REPOSITORY_NAME##*/}:production
      fi
      docker images
      echo "=========release_branch========="
    displayName: 'release_branch'

- job: deploy_branch
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: release_branch
  condition: and(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.SourceBranchName'], 'dev'))
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: staging.pem
  - script: |
      ls -la
      ls ../
      echo $(Build.Reason)
      echo "=========deploy_branch========="
    displayName: 'deploy_branch'

- job: echo
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - script: |
      ls -la
      echo "==============="
      git status
      echo "=================="
      git branch
      echo "================="
      echo $(Agent.TempDirectory)
      echo ${BUILD_REPOSITORY_NAME##*/}
      echo ${BUILD_SOURCEBRANCHNAME/\//-}
      echo $(System.DefaultWorkingDirectory)
      echo $(Build.Repository.Name)
      echo $(Build.SourceBranch)
      echo $(Build.SourceBranchName)
      echo $(System.PullRequest.SourceBranch)
      echo $(System.PullRequest.TargetBranch)
      echo $(Build.Reason)
      echo $(SONAR_LOGIN)
      echo $(SONAR_PASS)
      echo $(DOCKER_USER)
      echo $(DOCKER_PASS)
      echo $(DOCKER_SERVER)
      echo "=================="
